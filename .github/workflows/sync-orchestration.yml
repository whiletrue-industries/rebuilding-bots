name: Sync Orchestration

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      config_file:
        description: 'Sync configuration file'
        required: true
        default: 'specs/takanon/sync_config.yaml'
        type: string
      force_full_sync:
        description: 'Force full sync (ignore cache)'
        required: false
        default: false
        type: boolean

  # Scheduled sync (daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

  # Trigger on push to main branch
  push:
    branches:
      - main
    paths:
      - 'specs/**/sync_config.yaml'
      - 'botnim/sync/**'
      - '.github/workflows/sync-orchestration.yml'

env:
  PYTHON_VERSION: '3.11'
  CACHE_DIR: './cache'
  LOG_DIR: './logs'

jobs:
  sync-orchestration:
    name: Sync Orchestration
    runs-on: ubuntu-latest
    
    # Add timeout to prevent hanging jobs
    timeout-minutes: 60
    
    # Add concurrency to prevent multiple syncs running simultaneously
    concurrency:
      group: sync-${{ github.ref }}
      cancel-in-progress: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better logging
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: Create cache and log directories
        run: |
          mkdir -p ${{ env.CACHE_DIR }}
          mkdir -p ${{ env.LOG_DIR }}
      
      - name: Set up environment variables
        run: |
          # Set environment variables based on target environment
          if [ "${{ github.event.inputs.environment || 'staging' }}" = "production" ]; then
            echo "ES_HOST_PRODUCTION=${{ secrets.ES_HOST_PRODUCTION }}" >> $GITHUB_ENV
            echo "ES_USERNAME_PRODUCTION=${{ secrets.ES_USERNAME_PRODUCTION }}" >> $GITHUB_ENV
            echo "ES_PASSWORD_PRODUCTION=${{ secrets.ES_PASSWORD_PRODUCTION }}" >> $GITHUB_ENV
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
            echo "SYNC_ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "ES_HOST_STAGING=${{ secrets.ES_HOST_STAGING }}" >> $GITHUB_ENV
            echo "ES_USERNAME_STAGING=${{ secrets.ES_USERNAME_STAGING }}" >> $GITHUB_ENV
            echo "ES_PASSWORD_STAGING=${{ secrets.ES_PASSWORD_STAGING }}" >> $GITHUB_ENV
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
            echo "SYNC_ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
      
      - name: Validate sync configuration
        run: |
          echo "🔍 Validating sync configuration..."
          python -c "
          from botnim.sync.config import SyncConfig
          config = SyncConfig.from_yaml('${{ github.event.inputs.config_file || 'specs/takanon/sync_config.yaml' }}')
          print(f'✅ Configuration loaded: {config.name}')
          print(f'📋 Sources: {len(config.sources)} total, {len([s for s in config.sources if s.enabled])} enabled')
          "
      
      - name: Run sync orchestration
        id: sync
        run: |
          echo "🚀 Starting sync orchestration..."
          echo "Environment: ${{ env.SYNC_ENVIRONMENT }}"
          echo "Config file: ${{ github.event.inputs.config_file || 'specs/takanon/sync_config.yaml' }}"
          
          # Run sync orchestration with comprehensive logging
          python -m botnim.sync.cli orchestrate \
            --config-file "${{ github.event.inputs.config_file || 'specs/takanon/sync_config.yaml' }}" \
            --environment "${{ env.SYNC_ENVIRONMENT }}" \
            2>&1 | tee ${{ env.LOG_DIR }}/sync-orchestration.log
          
          # Capture exit code
          SYNC_EXIT_CODE=${PIPESTATUS[0]}
          echo "sync_exit_code=$SYNC_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $SYNC_EXIT_CODE -eq 0 ]; then
            echo "✅ Sync orchestration completed successfully"
          else
            echo "❌ Sync orchestration failed with exit code $SYNC_EXIT_CODE"
          fi
      
      - name: Upload sync logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sync-logs-${{ github.run_id }}
          path: |
            ${{ env.LOG_DIR }}/
            ${{ env.CACHE_DIR }}/
          retention-days: 30
      
      - name: Generate sync report
        if: always()
        run: |
          echo "📊 Generating sync report..."
          
          # Create a comprehensive report
          cat > ${{ env.LOG_DIR }}/sync-report.md << EOF
          # Sync Orchestration Report
          
          **Run ID:** ${{ github.run_id }}
          **Environment:** ${{ env.SYNC_ENVIRONMENT }}
          **Config File:** ${{ github.event.inputs.config_file || 'specs/takanon/sync_config.yaml' }}
          **Trigger:** ${{ github.event_name }}
          **Status:** ${{ steps.sync.outputs.sync_exit_code == '0' && '✅ Success' || '❌ Failed' }}
          
          ## Summary
          
          - **Exit Code:** ${{ steps.sync.outputs.sync_exit_code }}
          - **Log File:** [sync-orchestration.log](sync-orchestration.log)
          
          ## Artifacts
          
          - Sync logs and cache files are available as artifacts
          - Retention: 30 days
          
          ## Next Steps
          
          ${{ steps.sync.outputs.sync_exit_code == '0' && '✅ Sync completed successfully. No action required.' || '❌ Sync failed. Please check logs and investigate.' }}
          
          EOF
      
      - name: Upload sync report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sync-report-${{ github.run_id }}
          path: ${{ env.LOG_DIR }}/sync-report.md
          retention-days: 30
      


  # Optional: Run tests after sync
  test-sync:
    name: Test Sync Components
    runs-on: ubuntu-latest
    needs: sync-orchestration
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run sync tests
        run: |
          echo "🧪 Running sync component tests..."
          pytest botnim/sync/tests/ -v --cov=botnim.sync --cov-report=xml
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: sync
          name: sync-coverage

  # Optional: Monitor sync health
  monitor-sync:
    name: Monitor Sync Health
    runs-on: ubuntu-latest
    needs: sync-orchestration
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download sync logs
        uses: actions/download-artifact@v3
        with:
          name: sync-logs-${{ github.run_id }}
          path: ./artifacts
      
      - name: Analyze sync health
        run: |
          echo "🔍 Analyzing sync health..."
          
          # Check if sync logs exist
          if [ -f "./artifacts/logs/sync-orchestration.log" ]; then
            echo "✅ Sync logs found"
            
            # Basic health checks
            ERROR_COUNT=$(grep -c "ERROR\|❌" ./artifacts/logs/sync-orchestration.log || echo "0")
            SUCCESS_COUNT=$(grep -c "✅" ./artifacts/logs/sync-orchestration.log || echo "0")
            
            echo "Error count: $ERROR_COUNT"
            echo "Success count: $SUCCESS_COUNT"
            
            # Create health report
            cat > health-report.md << EOF
            # Sync Health Report
            
            **Run ID:** ${{ github.run_id }}
            **Analysis Time:** $(date -u)
            
            ## Metrics
            - **Errors:** $ERROR_COUNT
            - **Successes:** $SUCCESS_COUNT
            - **Health Score:** $(( SUCCESS_COUNT * 100 / (SUCCESS_COUNT + ERROR_COUNT) ))%
            
            ## Recommendations
            EOF
            
            if [ $ERROR_COUNT -gt 0 ]; then
              echo "- ⚠️ Review error logs for potential issues" >> health-report.md
            else
              echo "- ✅ No errors detected" >> health-report.md
            fi
            
          else
            echo "❌ Sync logs not found"
            echo "Sync logs not available for analysis" > health-report.md
          fi
      
      - name: Upload health report
        uses: actions/upload-artifact@v3
        with:
          name: health-report-${{ github.run_id }}
          path: health-report.md
          retention-days: 30 